{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","role","placeholder","onClick","toggleMode","htmlFor","Textform","Text","setText","useState","Fragment","heading","value","onChange","event","console","log","target","rows","handleUpCase","toUpperCase","handleLoCase","toLowerCase","handleAltCase","word","str","i","length","charAt","slice","handleInverseCase","handleCopyTxt","text","document","getElementById","select","navigator","clipboard","writeText","showalert","handleClearTxt","split","Alert","alert","class","msg","App","setMode","setAlert","body","classList","remove","add","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.b68fff04.chunk.js","sourcesContent":["import React from 'react'\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className={`navbar-brand text-${props.mode === \"dark\" ? \"light\":\"dark\"}`} href=\"/\">\r\n          Text-Utils\r\n        </a>\r\n        {/* <Link className={`navbar-brand text-${props.mode === \"dark\" ? \"light\":\"dark\"}`} to=\"/\">\r\n          Text-Utils\r\n        </Link> */}\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <a className={`nav-link active text-${props.mode === \"dark\" ? \"light\":\"dark\"}`} aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a> */}\r\n              {/* <Link className={`nav-link active text-${props.mode === \"dark\" ? \"light\":\"dark\"}`} aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link> */}\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className={`nav-link active text-${props.mode === \"dark\" ? \"light\":\"dark\"}`} to=\"/about\">\r\n                About\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className={`btn btn-outline-primary text-${props.mode === \"dark\" ? \"light\":\"dark\"}`} type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n            <div className=\"form-check form-switch mx-2\">\r\n              <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n              <label className={`form-check-label text-${props.mode === \"dark\" ? \"light\":\"dark\"}`} htmlFor=\"flexSwitchCheckDefault\">Enable Dark mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  const [Text, setText] = useState(\"\");\r\n  const handleonchange = (event) => {\r\n    console.log(\"handle on change called\");\r\n    setText(event.target.value);\r\n  };\r\n  const handleUpCase = () => {\r\n    console.log(\"text to upper case : \" + Text);\r\n    setText(Text.toUpperCase());\r\n  };\r\n  const handleLoCase = () => {\r\n    console.log(\"text to lower case : \" + Text);\r\n    setText(Text.toLowerCase());\r\n  };\r\n  const handleAltCase = () => {\r\n    var word = Text\r\n    var str =\"\"\r\n    for (let i = 0; i < word.length; i++) {\r\n      if (i % 2 === 0) {\r\n        str = word.charAt(i).toUpperCase();\r\n        word  = word.slice(0, i) + str + word.slice(i + 1);\r\n      } else {\r\n        str = word.charAt(i).toLowerCase();\r\n        word  = word.slice(0, i) + str + word.slice(i + 1);\r\n      }\r\n    }\r\n    setText(word);\r\n  };\r\n  const handleInverseCase = () => {\r\n    var word =  Text;\r\n    var str = \"\"\r\n    for (let i = 0; i < Text.length; i++) {\r\n      if(Text.charAt(i) === Text.charAt(i).toLowerCase()){\r\n        str=Text.charAt(i).toUpperCase();\r\n        word  = word.slice(0, i) + str + word.slice(i + 1);\r\n      }else if (Text.charAt(i) === Text.charAt(i).toUpperCase()){\r\n        str =Text.charAt(i).toLowerCase();\r\n        word  = word.slice(0, i) + str + word.slice(i + 1);\r\n      }\r\n    }\r\n    setText(word);\r\n  };\r\n  const handleCopyTxt = () => {\r\n    var text = document.getElementById(\"exampleFormControlTextarea1\")\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showalert(\"Text Copied !\", \"success\")\r\n\r\n  };\r\n  const handleClearTxt = () => {\r\n    console.log(\"Text cleared\");\r\n    setText(\"\");\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"container m-5\">\r\n        <h3>{props.heading}</h3>\r\n        <textarea\r\n          className={`form-control ${props.mode === \"dark\" ? \"text-bg-secondary\":\"text-bg-light\"}`}\r\n          value={Text}\r\n          onChange={handleonchange}\r\n          id=\"exampleFormControlTextarea1\"\r\n          rows=\"8\"\r\n        ></textarea>\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleUpCase}\r\n          className=\"btn btn-primary m-3\"\r\n        >\r\n          {\" \"}\r\n          UPPERCASE\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleLoCase}\r\n          className=\"btn btn-primary m-3\"\r\n        >\r\n          {\" \"}\r\n          lowercase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleAltCase}\r\n          className=\"btn btn-primary m-3\"\r\n        >\r\n          {\" \"}\r\n          AlTeRnAtE cAsE\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleInverseCase}\r\n          className=\"btn btn-primary m-3\"\r\n        >\r\n          {\" \"}\r\n          INveRSe CaSe\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleCopyTxt}\r\n          className=\"btn btn-primary m-3\"\r\n        >\r\n          {\" \"}\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleClearTxt}\r\n          className=\"btn btn-primary m-3\"\r\n        >\r\n          {\" \"}\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n      <div className=\"container m-5\">\r\n        <h3>Your Text Summary Here</h3>\r\n        <p>\r\n          {\" \"}\r\n          {Text.split(\" \").length} words and {Text.length} letters\r\n        </p>\r\n        <p>Average read time: {0.005 * Text.split(\" \").length} minutes.</p>\r\n        <p className={`${props.mode === \"dark\" ? \"text-bg-primary\":\"bg-primary-subtle\"} p-3`}> {Text}</p>\r\n      </div>\r\n    </> \r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    props.alert && <div class={`alert alert-${props.alert.type}`} role=\"alert\">\r\n        {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Textform from \"./components/Textform\";\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\n// import { BrowserRouter, Route, Routes} from \"react-router-dom\";\n\nfunction App() {  \n  const  [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showalert = (message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    });\n    setTimeout(()=>{setAlert(null)},2000);\n  };\n  const toggleMode = ()=>{\n    if (mode === \"light\"){\n      console.log(\"changing mode\")\n      setMode(\"dark\")\n      document.body.classList.remove( 'text-bg-light' )\n      document.body.classList.add('text-bg-dark')\n    }\n    else{\n      console.log(\"changing mode\")\n      setMode(\"light\")\n      document.body.classList.remove( 'text-bg-dark' )\n      document.body.classList.add('text-bg-light')\n    }\n  };\n  return (\n    <>\n    {/* <BrowserRouter> */}\n      <Navbar mode={mode} toggleMode = {toggleMode}/>\n      <Alert alert= {alert}/>\n      <div className=\"container\">\n        {/* <Routes>\n          <Route path=\"/about\" element={<About />} />\n        </Routes>\n        <Routes> */}\n          {/* <Route path=\"/\" element={<Textform heading = \"Text to be analysed below\" mode={mode} showalert={showalert} />}/> */}\n          <Textform heading = \"Text to be analysed below\" mode={mode} showalert={showalert} />\n        {/* </Routes> */}\n      </div>\n    {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}